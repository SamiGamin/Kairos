package com.kairos.ast.servicios.Versiones

import android.app.Activity
import android.app.AlertDialog
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.util.Log
import com.kairos.ast.BuildConfig
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.engine.android.Android
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.client.request.get
import io.ktor.serialization.kotlinx.json.json
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.jsonArray
import kotlinx.serialization.json.jsonObject
import kotlinx.serialization.json.jsonPrimitive

// Data class para encapsular la informaci√≥n de la release de GitHub
private data class GithubRelease(val versionName: String, val apkUrl: String?)

class UpdateManager(private val context: Context) {

    private val client = HttpClient(Android) {
        install(ContentNegotiation) { json() }
    }

    /**
     * Orquesta la comprobaci√≥n de actualizaciones.
     * Si encuentra una, muestra un di√°logo y detiene el flujo.
     * Si no, o si hay un error, ejecuta la lambda onUpToDate para continuar.
     */
    suspend fun checkForUpdates(onUpToDate: () -> Unit) {
        val currentVersion = BuildConfig.VERSION_NAME
        Log.d("UpdateManager", "üì≤ Versi√≥n instalada: $currentVersion")

        val latestRelease = getLatestReleaseFromGitHub()

        if (latestRelease == null) {
            Log.e("UpdateManager", "No se pudo obtener la informaci√≥n de la √∫ltima versi√≥n. Dejando continuar.")
            onUpToDate()
            return
        }

        Log.d("UpdateManager", "üåê √öltima versi√≥n en GitHub: ${latestRelease.versionName}")

        if (latestRelease.versionName != currentVersion) {
            Log.d("UpdateManager", "‚ö†Ô∏è Hay una nueva versi√≥n disponible.")
            if (latestRelease.apkUrl != null) {
                showUpdateDialog(latestRelease.apkUrl)
                // El flujo se detiene aqu√≠, no se llama a onUpToDate()
            } else {
                Log.w("UpdateManager", "‚ö†Ô∏è Nueva versi√≥n encontrada, pero sin APK adjunto. Dejando continuar.")
                onUpToDate()
            }
        } else {
            Log.d("UpdateManager", "‚úÖ La app ya est√° en la √∫ltima versi√≥n.")
            onUpToDate()
        }
    }

    /**
     * Realiza la llamada a la API de GitHub para obtener los datos de la √∫ltima release.
     * @return Un objeto [GithubRelease] con la informaci√≥n o null si hay un error.
     */
    private suspend fun getLatestReleaseFromGitHub(): GithubRelease? {
        return try {
            val releaseJson = client.get("https://api.github.com/repos/SamiGamin/Kairos/releases/latest")
                .body<JsonObject>()

            val latestVersion = releaseJson["tag_name"]?.jsonPrimitive?.content?.removePrefix("v")
            val apkUrl = releaseJson["assets"]?.jsonArray
                ?.firstOrNull()
                ?.jsonObject?.get("browser_download_url")?.jsonPrimitive?.content

            if (latestVersion != null) {
                GithubRelease(versionName = latestVersion, apkUrl = apkUrl)
            } else {
                Log.w("UpdateManager", "El JSON de la release de GitHub no contiene 'tag_name'.")
                null
            }
        } catch (e: Exception) {
            Log.e("UpdateManager", "‚ùå Error al consultar GitHub: ${e.message}", e)
            null
        }
    }

    /**
     * Muestra el di√°logo de actualizaci√≥n, solo si el contexto es una Activity v√°lida y no se est√° cerrando.
     */
    private fun showUpdateDialog(apkUrl: String) {
        if (context is Activity && !context.isFinishing) {
            AlertDialog.Builder(context)
                .setTitle("Actualizaci√≥n disponible")
                .setMessage("Debes actualizar a la √∫ltima versi√≥n para continuar.")
                .setCancelable(false)
                .setPositiveButton("Actualizar") { _, _ ->
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(apkUrl))
                    context.startActivity(intent)
                }
                .show()
        } else {
            Log.w("UpdateManager", "No se puede mostrar el di√°logo de actualizaci√≥n, el contexto no es una Activity v√°lida o se est√° destruyendo.")
        }
    }
}